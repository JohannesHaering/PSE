<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>272</x>
      <y>0</y>
      <w>312</w>
      <h>176</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::NeuralNetwork

--
- name : string
- currentLayer : &lt;pointer&gt;
--
+ &lt;&lt;constructor&gt;&gt; NeuralNetwork() : void
+ &lt;&lt;constructor&gt;&gt; NeuralNetwork(name : string) : void
+ addLayera(layer : NetworkLayer) : void
+ getFirstLayer() : NetworkLayer
+ getLastLayer() : NetworkLayer
+ getNextLayer() : NetworkLayer
+ getPreviousLayer() : NetworkLayer</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1168</x>
      <y>64</y>
      <w>400</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::NetworkLayer

--
# name : string
# inputDimensions : int[]
--
+ setName(name : string) : void
+ setInputDimensions(inputDimensions : int[]) : void
+ getName() : string
+ getInputDimensions() : int[]
+ getTensorDimenssions() : int[]
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>544</x>
      <y>296</y>
      <w>736</w>
      <h>208</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::ConvolutionLayer

--
- weigthsTensor : double[][][][]
- stride : int
- padding : int
--
+ &lt;&lt;constructor&gt;&gt; ConvolutionLayer() : void
+ &lt;&lt;constructor&gt;&gt; ConvolutionLayer(name : string, inputDimensions : int[], weights : double[][][][], stride : int, padding : int) : void
+ setWeigthsTensor(weights : double[][][][]) : void
+ setStride(stride : int) : void
+ setPadding(padding : int) : void
+ getWeigthsTensor() : double[][][][]
+ getStride() : int
+ getPadding() : int
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1880</x>
      <y>296</y>
      <w>648</w>
      <h>208</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::PollingLayer

--
- type : PollingType
- size : int
- stride : int
--
+ &lt;&lt;constructor&gt;&gt; polingLayer() : void
+ &lt;&lt;constructor&gt;&gt; polingLayer(name : string, inputDimensions : int[], size : int, stride : int, type : PollingType) : void
+ setType(type : PollingType) : void
+ setSize(size : int) : void
+ setStride(stride : int) : void
+ getType() : PollingType
+ getSize() : int
+ getStride() : int

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3272</x>
      <y>296</y>
      <w>536</w>
      <h>208</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::DenseLayer

--
- matrix : double[][]
--
+ &lt;&lt;constructor&gt;&gt; DenseLayer() : void
+ &lt;&lt;constructor&gt;&gt; DenseLayer(name : string, inputDimensions : int[], matrix : double[][]) : void
+ setMatrix(matrix : double[][]) : void
+ getMatrix() : double[][]


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>5800</x>
      <y>296</y>
      <w>424</w>
      <h>208</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::InceptionLayer

--
- currentChain : &lt;pointer&gt;
--
+ &lt;&lt;constructor&gt;&gt; InceptionLayer() : void
+ &lt;&lt;constructor&gt;&gt; InceptionLayer(name : string, inputDimensions : int[]) : void
+ addLayer_chain(chain : NeuralNetwork) : void
+ getFirstChain() : NeuralNetwork
+ getNextChain() : NeuralNetwork</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>920</x>
      <y>232</y>
      <w>5080</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;20.0;6330.0;20.0;6330.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2160</x>
      <y>240</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3504</x>
      <y>240</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1352</x>
      <y>208</y>
      <w>24</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>576</x>
      <y>120</y>
      <w>608</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=0..*
list &lt;layers&gt;</panel_attributes>
    <additional_attributes>10.0;20.0;740.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>272</x>
      <y>168</y>
      <w>136</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>lt=.&gt;
&lt;&lt;uses&gt;&gt;</panel_attributes>
    <additional_attributes>100.0;10.0;100.0;150.0;10.0;150.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1296</x>
      <y>296</y>
      <w>568</w>
      <h>208</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::ActivationLayer

--
- function : Activation
--
+ &lt;&lt;constructor&gt;&gt; ActivationLayer() : void
+ &lt;&lt;constructor&gt;&gt; ActivationLayer(name : string, inputDimensions : int[], function : Activation) : void
+ setFunction(function : Activation) : void
+ getFunction() : Activation

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3824</x>
      <y>296</y>
      <w>400</w>
      <h>208</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::FlattenLayer

--

--
+ &lt;&lt;constructor&gt;&gt; FlattenLayer() : void
+ &lt;&lt;constructor&gt;&gt; FlattenLayer(name : string, inputDimensions) : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4240</x>
      <y>296</y>
      <w>552</w>
      <h>208</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::DropoutLayer

--
- dropoutRate : float
--
+ &lt;&lt;constructor&gt;&gt; DropoutLayer() : void
+ &lt;&lt;constructor&gt;&gt; DropoutLayer(name : string, inputDimensions : int[], dropoutRate : float) : void

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1528</x>
      <y>240</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>4000</x>
      <y>240</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>4488</x>
      <y>240</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2544</x>
      <y>296</y>
      <w>712</w>
      <h>208</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::LocalResponseNormalizationLayer

--
- type : LRNType
- depth : int
--
+ &lt;&lt;constructor&gt;&gt; LocalResponseNormalizationLayer() : void
+ &lt;&lt;constructor&gt;&gt; LocalResponseNormalizationLayer(name : string, inputDimensions : int[], type : LRNType, depth : int) : void
+ setType(type : LRNType) : void
+ setDepth(depth : int) : void
+ getType() : LRNType
+ getDepth() : int

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2888</x>
      <y>240</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>576</x>
      <y>8</y>
      <w>5592</w>
      <h>304</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=0..*
list &lt;chains&gt;
</panel_attributes>
    <additional_attributes>6880.0;360.0;6880.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4808</x>
      <y>296</y>
      <w>472</w>
      <h>208</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::CollectResultsLayer

--

--
+ &lt;&lt;constructor&gt;&gt; CollectResultsLayer() : void
+ &lt;&lt;constructor&gt;&gt; CollectResultsLayer(name : string, inputDimensions : int[]) : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>5008</x>
      <y>240</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>72</x>
      <y>264</y>
      <w>208</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enumeration&gt;&gt;
NeuralNetworkPkg::Activation

--
SIGMOID
TANH
RELU
L_RELU
P_RELU
SOFTMAX
SWISH</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>72</x>
      <y>416</y>
      <w>208</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enumeration&gt;&gt;
NeuralNetworkPkg::PollingType

--
MAX
AVEREAGE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>72</x>
      <y>504</y>
      <w>208</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enumeration&gt;&gt;
NeuralNetworkPkg::LRNType

--
INTER_CHANNEL
INTRA_CHANNEL</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>272</x>
      <y>280</y>
      <w>96</w>
      <h>176</h>
    </coordinates>
    <panel_attributes>lt=.&gt;
</panel_attributes>
    <additional_attributes>100.0;10.0;100.0;200.0;10.0;200.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>272</x>
      <y>432</y>
      <w>96</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>lt=.&gt;
</panel_attributes>
    <additional_attributes>100.0;10.0;100.0;120.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>352</x>
      <y>752</y>
      <w>520</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::NetworkOperations

--
- platformName : string
--
+ &lt;&lt;constructor&gt;&gt; NetworkOperations() : void
+ &lt;&lt;constructor&gt;&gt; NetworkOperations(platformName : string) : void
+ addKernelCode(layerType : Layertype, kernelCode : string[]) : void
+ executeCalculation(layer : NetworkLayer, inputData : double[][][]) : double[][][]
+ executeBackPropagation(layer : NetworkLayer, inputData : double[][][][]) : double[][][][]</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>712</x>
      <y>1016</y>
      <w>488</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::ConvolutionCode

--

--
+ setKernelCode(kernelCode : string[]) : void
+ executeKernelCode(layer : NetworkLayer, inputData : double[][][][]) : double[][][][]
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1968</x>
      <y>960</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1368</x>
      <y>912</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1440</x>
      <y>960</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes/>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1152</x>
      <y>824</y>
      <w>488</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>&lt;&lt;abstract&gt;&gt;
/NeuralNetworkPkg::NetworkLayer/

--
# kernelCode : string[]
--
/+ setKernelCode(kernelCode : string[]) : void/
/+ executeKernelCode(layer : NetworkLayer, inputData : double[][][][]) : double[][][][]/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>936</x>
      <y>952</y>
      <w>4080</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;20.0;5080.0;20.0;5080.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2968</x>
      <y>960</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3464</x>
      <y>960</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3976</x>
      <y>960</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2440</x>
      <y>960</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>4488</x>
      <y>960</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>0</x>
      <y>632</y>
      <w>368</w>
      <h>208</h>
    </coordinates>
    <panel_attributes>lt=.&gt;
&lt;&lt;uses&gt;&gt;
</panel_attributes>
    <additional_attributes>440.0;240.0;10.0;240.0;10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>5296</x>
      <y>296</y>
      <w>488</w>
      <h>208</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::OutputStorageLayer

--
outputData : double[][][]
--
+ &lt;&lt;constructor&gt;&gt; CollectResultsLayer() : void
+ &lt;&lt;constructor&gt;&gt; CollectResultsLayer(name : string, outputData : double[][][]) : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>5544</x>
      <y>240</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>72</x>
      <y>592</y>
      <w>208</w>
      <h>184</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enumeration&gt;&gt;
NeuralNetworkPkg::LayerType

--
CONVOLUTION
ACTIVATION
POLING
LRN
DENSE
FLATTEN
DROPOUT
COLLECT_RESULTS
INCEPTION
OUTPUT_STORAGE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>0</x>
      <y>536</y>
      <w>88</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=.&gt;

</panel_attributes>
    <additional_attributes>10.0;130.0;10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>0</x>
      <y>440</y>
      <w>88</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=.&gt;

</panel_attributes>
    <additional_attributes>10.0;130.0;10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>0</x>
      <y>344</y>
      <w>88</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=.&gt;

</panel_attributes>
    <additional_attributes>10.0;130.0;10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>864</x>
      <y>840</y>
      <w>304</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=10
layer</panel_attributes>
    <additional_attributes>10.0;20.0;360.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1216</x>
      <y>1016</y>
      <w>488</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::ActivationCode

--

--
+ setKernelCode(kernelCode : string[]) : void
+ executeKernelCode(layer : NetworkLayer, inputData : double[][][][]) : double[][][][]
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1720</x>
      <y>1016</y>
      <w>488</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::PollingCode

--

--
+ setKernelCode(kernelCode : string[]) : void
+ executeKernelCode(layer : NetworkLayer, inputData : double[][][][]) : double[][][][]
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2224</x>
      <y>1016</y>
      <w>488</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::LocalResponseNormalizationCode

--

--
+ setKernelCode(kernelCode : string[]) : void
+ executeKernelCode(layer : NetworkLayer, inputData : double[][][][]) : double[][][][]
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2728</x>
      <y>1016</y>
      <w>488</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::FlattenCode

--

--
+ setKernelCode(kernelCode : string[]) : void
+ executeKernelCode(layer : NetworkLayer, inputData : double[][][][]) : double[][][][]
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3232</x>
      <y>1016</y>
      <w>488</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::DropoutCode

--

--
+ setKernelCode(kernelCode : string[]) : void
+ executeKernelCode(layer : NetworkLayer, inputData : double[][][][]) : double[][][][]
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3736</x>
      <y>1016</y>
      <w>488</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::CollectResultsCode

--

--
+ setKernelCode(kernelCode : string[]) : void
+ executeKernelCode(layer : NetworkLayer, inputData : double[][][][]) : double[][][][]
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4240</x>
      <y>1016</y>
      <w>488</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::OutputStorageCode

--

--
+ setKernelCode(kernelCode : string[]) : void
+ executeKernelCode(layer : NetworkLayer, inputData : double[][][][]) : double[][][][]
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>4744</x>
      <y>1016</y>
      <w>488</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>
NeuralNetworkPkg::InceptionCode

--

--
+ setKernelCode(kernelCode : string[]) : void
+ executeKernelCode(layer : NetworkLayer, inputData : double[][][][]) : double[][][][]
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>864</x>
      <y>760</y>
      <w>4312</w>
      <h>272</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
operations</panel_attributes>
    <additional_attributes>10.0;20.0;5370.0;20.0;5370.0;320.0</additional_attributes>
  </element>
</diagram>
