Goal:
The goal is a software which performs image classification and is able to switch between deploy platforms and working modes.
It also should have a GUI to control the software and to show the results.

Acceptance Criteria:
MAC010: Image classification
MAC020: Running NN on heterogenous platforms, CPU and FPGA
MAC030: Different operating modes
MAC040: GUI for interacting with software
MAC041: Performance/power prediction

KAC050: Training a nn for classification
KAC060: Illustration of a topology of the nn
KAC070: Object detection
KAC080: Choosing between different models
KAC090: Creating new models
KAC100: Voting of multiple nn
KAC110: Using video for classification
KAC120: Using camera for classification input
KAC130: Running NN on GPU

Functional requirements:
MFR010: Use neural network for image classification
MFR011: Deploy pre-trained nn with the corresponding layers
MFR012: Reading and parsing nn config/weight file
MFR020: Have high perfomance mode
MFR021: Have low power consumption mode
MFR022: Have high energy efficiency mode
MFR023: Calculator for power consumption
MFR024: Calculator for performance
MFR025: Dispatching the calculation process defined from the mode
MFR030: Support CPU for calculation
MFR031: Support FPGA for calculation
KFR032: Support GPU for calculation
MFR040: Communication between Host-PC and platform
MFR041: Send image for classification
MFR042: Receive result
MFR050: GUI
MFR060: Showing results
MFR070: Choosing image for classification in format .jpg, .png, .bmp
MFR080: Choosing platform/hardware
MFR081: Look which devices are avaiable
MFR082: Testing communication
MFR090:	Choosing mode
MFR091: Show how much energy and power on which platform one needs/has
KFR100: Choosing between different models for example AlexNet, GoogleNet
KFR110: Train nn for classification of imageset (with transfer learning)
KFR111: Saving new trained nn (config an weights)
KFR112: Choosing/Reading data set
KFR113: Backpropagation
KFR114: Choosing parameters like learning rate
KFR120: Illustrating nn topology
KFR130: Object detection algorithm
KFR131: Showing detected object
KFR132: Choosing between detection and classification mode
KFR140: Creating new topology
KFR150: Choosing between training and interference mode
KFR160: Choosing video in format .avi
KFR161: Apply classification for a certain amount of frames
KFR170: Connect with camera 
KFR171: Receive video stream from camera
KFR180: Detecting object
KFR181: Drawing bounding box


Product data:
PD010: Images for classification
PD020: Labeled image set for training
PD030: Config/weight file of pretrained model


Non-functional requirements:
NFR010: (?)


Demarcation:
D010: No real time / no performance optimization
D020: No mobile support
D030: No neural network size optimization
DO40: No low-level (Assembler) optimization


Product usage:
Image classification


Product environment:
Lab PC at CDNC institute with Xubuntu 18.04
FPGA
GPU

Tests

GUI

Glossar